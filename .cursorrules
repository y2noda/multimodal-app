### コードスタイルと構造
- 簡潔で効率的なソースコードを書きます。
- ソースコードが読みやすく、メンテナンスしやすいソースコードを心がけ、正確な例を示します。
- コードの重複を避ける：ウィジェットや関数を再利用可能なコンポーネントにモジュール化します。
- 説明的な変数名を使用する：isLoading、hasErrorのような補助動詞を用いた名前を使います。

### ディレクトリ構造
- `src/`: ソースコードを格納
  - `components/`: 再利用可能なコンポーネント
  - `pages/`: ページコンポーネント
  - `hooks/`: カスタムフック
  - `utils/`: ユーティリティ関数
  - `types/`: 型定義s
- `docs/`: プロジェクトドキュメント

### 命名規則
- コンポーネント: PascalCase (例: `UserProfile`)
- 関数・変数: camelCase (例: `getUserData`)
- 定数: SNAKE_CASE (例: `MAX_RETRY_COUNT`)
- ファイル名: kebab-case (例: `user-profile.tsx`)

### コーディング規約
- TypeScriptの型を適切に使用する
- コメントは必要最小限に留める
- 関数は単一責任の原則に従う
- テストコードを書く
- `docs/`ディレクトリのガイドラインに従う

### ドキュメント参照
- 実装前に`docs/`ディレクトリの関連ドキュメントを確認する
- 仕様やガイドラインの変更がある場合は`docs/`を更新する
- 新機能の追加時は必要に応じてドキュメントを追加する
